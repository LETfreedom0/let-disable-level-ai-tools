{"version":3,"file":"cozeApi.js","sources":["utils/cozeApi.js"],"sourcesContent":["/**\n * Coze API 服务\n * 用于处理与Coze API的交互\n */\n\n// Coze API配置\nconst cozeConfig = {\n\tapiKey: 'sat_yV6QwGnlKYVZUVfjycLLUvMzN20jb0PXA3wToLssIYmFmMJTVxa5B7n8zbKSgU09', // 用户提供的Coze API密钥\n\tbotId: '7548074605521682470', // 从用户提供的链接中提取的Bot ID\n\tapiUrl: 'https://api.coze.cn/v3/chat' // Coze API地址（中国区域）\n};\n\n// 输出配置信息用于调试\nconsole.log('[DEBUG] Coze API配置:', {\n\tbotId: cozeConfig.botId,\n\tapiUrl: cozeConfig.apiUrl,\n\tapiKeyLength: cozeConfig.apiKey.length // 不输出完整API密钥，只输出长度\n});\n\n/**\n * 发送消息到Coze API并获取回复\n * @param {Array} messages - 消息历史记录\n * @param {String} conversationId - 会话ID\n * @returns {Promise} - 返回包含消息和评估结果的Promise对象\n */\nexport async function sendMessageToCoze(messages, conversationId, onStreamUpdate) {\n\ttry {\n\t\t// 先检查网络状态\n\t\tconst networkStatus = await checkNetworkStatus();\n\t\tif (!networkStatus.isConnected) {\n\t\t\tthrow new Error('网络连接不可用，请检查网络设置');\n\t\t}\n\t\t\n\t\t// 获取最后一条用户消息\n\t\tconst lastUserMessage = messages.length > 0 ? messages[messages.length - 1] : { content: '' };\n\t\tconsole.log('[DEBUG] 最后一条用户消息:', lastUserMessage);\n\t\t\n\t\t// 构建请求体 - 适配v3 API格式\n\t\tconst requestBody = {\n\t\t\tbot_id: cozeConfig.botId,\n\t\t\tuser_id: conversationId || generateUUID(), // 使用会话ID作为用户ID\n\t\t\tstream: true, // 开启流式响应\n\t\t\tauto_save_history: true,\n\t\t\tadditional_messages: [\n\t\t\t\t{\n\t\t\t\t\trole: 'user',\n\t\t\t\t\tcontent: lastUserMessage.content,\n\t\t\t\t\tcontent_type: 'text'\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\t// console.log('[DEBUG] 请求体:', JSON.stringify(requestBody, null, 2));\n\t\t// console.log('[DEBUG] 请求URL:', cozeConfig.apiUrl);\n\t\t\n\t\t// 处理流式响应的方式\n\t\tif (requestBody.stream) {\n\t\t\t// console.log('[DEBUG] 使用流式响应模式');\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t// 使用原生请求以支持流式响应\n\t\t\t\tuni.request({\n\t\t\t\t\turl: cozeConfig.apiUrl,\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\ttimeout: 15000, // 添加15秒超时设置\n\t\t\t\t\theader: {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t'Authorization': `Bearer ${cozeConfig.apiKey}`,\n\t\t\t\t\t\t'Accept': 'text/event-stream'\n\t\t\t\t\t},\n\t\t\t\t\tdata: requestBody,\n\t\t\t\t\tsuccess: (res) => {\n\t\t\t\t\t\t// console.log('[DEBUG] 流式响应成功:', res.statusCode);\n\t\t\t\t\t\tif (res.statusCode !== 200) {\n\t\t\t\t\t\t\tconsole.error('[DEBUG] API请求失败:', res.statusCode, res.data);\n\t\t\t\t\t\t\treject(new Error(`API请求失败: ${res.statusCode}`));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 记录完整的流式响应数据\n\t\t\t\t\t\t// console.log('[DEBUG] 完整响应数据:', JSON.stringify(res.data, null, 2));\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 解析流式响应\n\t\t\t\t\t\tlet fullMessage = '';\n\t\t\t\t\t\tlet messageId = '';\n\t\t\t\t\t\tlet isCompleted = false;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 检查是否为字符串类型的响应（可能包含多个事件）\n\t\t\t\t\t\tif (typeof res.data === 'string') {\n\t\t\t\t\t\t\tconsole.log('[DEBUG] 收到字符串类型的流式响应');\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// 按事件分割响应\n\t\t\t\t\t\t\tconst events = res.data.split('\\n\\n').filter(event => event.trim());\n\t\t\t\t\t\t\tconsole.log('[DEBUG] 解析到', events.length, '个事件');\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// 处理每个事件\n\t\t\t\t\t\t\tevents.forEach(event => {\n\t\t\t\t\t\t\t\tconst lines = event.split('\\n');\n\t\t\t\t\t\t\t\tconst eventType = lines[0].replace('event:', '');\n\t\t\t\t\t\t\t\tlet data = '';\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// 提取data部分\n\t\t\t\t\t\t\t\tfor (let i = 1; i < lines.length; i++) {\n\t\t\t\t\t\t\t\t\tif (lines[i].startsWith('data:')) {\n\t\t\t\t\t\t\t\t\t\tdata = lines[i].replace('data:', '');\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tconsole.log(`[DEBUG] 事件类型: ${eventType}, 数据: ${data.substring(0, 100)}${data.length > 100 ? '...' : ''}`);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// 处理消息增量事件\n\t\t\t\t\t\t\t\tif (eventType === 'conversation.message.delta') {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tconst deltaData = JSON.parse(data);\n\t\t\t\t\t\t\t\t\t\tif (deltaData.role === 'assistant' && deltaData.content) {\n\t\t\t\t\t\t\t\t\t\t\tfullMessage += deltaData.content;\n\t\t\t\t\t\t\t\t\t\t\tmessageId = deltaData.id;\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t// 如果提供了流更新回调，则调用它\n\t\t\t\t\t\t\t\t\t\t\tif (typeof onStreamUpdate === 'function') {\n\t\t\t\t\t\t\t\t\t\t\t\tonStreamUpdate({\n\t\t\t\t\t\t\t\t\t\t\t\t\tmessage: fullMessage,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdelta: deltaData.content,\n\t\t\t\t\t\t\t\t\t\t\t\t\tmessageId: messageId,\n\t\t\t\t\t\t\t\t\t\t\t\t\tisCompleted: false\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\tconsole.error('[DEBUG] 解析delta数据失败:', e);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// 处理聊天完成事件\n\t\t\t\t\t\t\t\tif (eventType === 'conversation.chat.completed') {\n\t\t\t\t\t\t\t\t\tconsole.log('[DEBUG] 聊天完成，最终消息:', fullMessage);\n\t\t\t\t\t\t\t\t\tisCompleted = true;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// 如果提供了流更新回调，通知完成\n\t\t\t\t\t\t\t\t\tif (typeof onStreamUpdate === 'function') {\n\t\t\t\t\t\t\t\t\t\tonStreamUpdate({\n\t\t\t\t\t\t\t\t\t\t\tmessage: fullMessage,\n\t\t\t\t\t\t\t\t\t\t\tdelta: '',\n\t\t\t\t\t\t\t\t\t\t\tmessageId: messageId,\n\t\t\t\t\t\t\t\t\t\t\tisCompleted: true\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log('[DEBUG] 收到非字符串类型的响应:', typeof res.data);\n\t\t\t\t\t\t\t// 尝试从非流式响应中提取消息\n\t\t\t\t\t\t\tif (res.data && res.data.data && res.data.data.messages && res.data.data.messages.length > 0) {\n\t\t\t\t\t\t\t\tfullMessage = res.data.data.messages[0].content;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 检查是否包含评估结果\n\t\t\t\t\t\tconst assessmentResult = parseAssessmentResult(fullMessage);\n\t\t\t\t\t\tconsole.log('[DEBUG] 解析的评估结果:', assessmentResult);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 返回完整消息和评估结果\n\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\tmessage: fullMessage || '无法获取回复',\n\t\t\t\t\t\t\tassessmentResult: assessmentResult,\n\t\t\t\t\t\t\tmessageId: messageId,\n\t\t\t\t\t\t\tisCompleted: isCompleted\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tfail: (err) => {\n\t\t\t\t\t\tconsole.error('[DEBUG] 请求失败:', err);\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\t// 非流式响应处理\n\t\t\tconsole.log('[DEBUG] 使用非流式响应模式');\n\t\t\tconst res = await uni.request({\n\t\t\t\turl: cozeConfig.apiUrl,\n\t\t\t\tmethod: 'POST',\n\t\t\t\ttimeout: 15000,\n\t\t\t\theader: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t'Authorization': `Bearer ${cozeConfig.apiKey}`\n\t\t\t\t},\n\t\t\t\tdata: requestBody\n\t\t\t});\n\t\t\t\n\t\t\t// 检查响应状态\n\t\t\tconsole.log('[DEBUG] 响应数据:', res);\n\t\t\tconsole.log('[DEBUG] 响应状态码:', res.statusCode);\n\t\t\tif (res.statusCode !== 200) {\n\t\t\t\tconsole.error('[DEBUG] API请求失败:', res.statusCode, res.data);\n\t\t\t\tthrow new Error(`API请求失败: ${res.statusCode}`);\n\t\t\t}\n\t\t\t\n\t\t\t// 解析并返回AI回复\n\t\t\tlet responseData = res.data;\n\t\t\tif (typeof responseData === 'string') {\n\t\t\t\ttry {\n\t\t\t\t\tresponseData = JSON.parse(responseData);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error('[DEBUG] 响应数据JSON解析失败:', e, responseData);\n\t\t\t\t\tthrow new Error('无法解析API响应数据');\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log('[DEBUG] 完整响应数据:', JSON.stringify(responseData, null, 2));\n\t\t\t\n\t\t\t// v3 API返回格式可能是 data.messages[0].content\n\t\t\tconst aiMessage = responseData.data && responseData.data.messages && responseData.data.messages.length > 0 \n\t\t\t\t? responseData.data.messages[0].content \n\t\t\t\t: '无法获取回复';\n\t\t\tconsole.log('[DEBUG] 提取的AI回复:', aiMessage);\n\t\t\t\n\t\t\t// 检查是否包含评估结果\n\t\t\tconst assessmentResult = parseAssessmentResult(aiMessage);\n\t\t\tconsole.log('[DEBUG] 解析的评估结果:', assessmentResult);\n\t\t\t\n\t\t\treturn {\n\t\t\t\tmessage: aiMessage,\n\t\t\t\tassessmentResult: assessmentResult\n\t\t\t};\n\t\t}\n\t} catch (error) {\n\t\tconsole.error('[DEBUG] Coze API调用失败:', error);\n\t\tthrow error;\n\t}\n}\n\n/**\n * 解析评估结果\n * @param {String} message - AI回复消息\n * @returns {Object|null} - 返回评估结果对象，如果没有评估结果则返回null\n */\nexport function parseAssessmentResult(message) {\n\t// 这里可以根据AI回复的特定格式或关键词来解析评估结果\n\t// 实际实现应根据Coze Bot的回复格式进行定制\n\tconsole.log('[DEBUG] 开始解析评估结果，消息长度:', message.length);\n\tconsole.log('[DEBUG] 消息内容前100字符:', message.substring(0, 100) + (message.length > 100 ? '...' : ''));\n\t\n\t// 示例：检测是否包含\"评估结果\"关键词\n\tconst hasAssessmentKeyword = message.includes('评估结果');\n\tconst hasDisabilityLevelKeyword = message.includes('残疾等级');\n\tconsole.log('[DEBUG] 关键词检测结果 - 评估结果:', hasAssessmentKeyword, '残疾等级:', hasDisabilityLevelKeyword);\n\t\n\tif (hasAssessmentKeyword || hasDisabilityLevelKeyword) {\n\t\tconsole.log('[DEBUG] 检测到评估结果关键词，开始提取具体信息');\n\t\t// 这里应该实现实际的解析逻辑\n\t\t// 示例实现（实际应根据AI回复格式定制）\n\t\tconst typeMatch = message.match(/残疾类别[：:]\\s*([^\\n\\r,，。；;]+)/);\n\t\tconst levelMatch = message.match(/残疾等级[：:]\\s*([^\\n\\r,，。；;]+)/);\n\t\tconst descMatch = message.match(/评估说明[：:]\\s*([^\\n\\r]+)/);\n\t\tconst suggMatch = message.match(/建议[：:]\\s*([^\\n\\r]+)/);\n\t\t\n\t\tconsole.log('[DEBUG] 正则匹配结果 - 类别:', typeMatch, '等级:', levelMatch);\n\t\tconsole.log('[DEBUG] 正则匹配结果 - 说明:', descMatch ? '找到' : '未找到', '建议:', suggMatch ? '找到' : '未找到');\n\t\t\n\t\tif (typeMatch || levelMatch) {\n\t\t\tconst result = {\n\t\t\t\ttype: typeMatch ? typeMatch[1].trim() : '未指定',\n\t\t\t\tlevel: levelMatch ? levelMatch[1].trim() : '未指定',\n\t\t\t\tdescription: descMatch ? descMatch[1].trim() : '根据您提供的信息进行评估',\n\t\t\t\tsuggestion: suggMatch ? suggMatch[1].trim() : '建议前往专业机构进行正式评定'\n\t\t\t};\n\t\t\tconsole.log('[DEBUG] 成功提取评估结果:', JSON.stringify(result, null, 2));\n\t\t\treturn result;\n\t\t} else {\n\t\t\tconsole.log('[DEBUG] 虽然检测到关键词，但未能提取到具体评估信息');\n\t\t}\n\t} else {\n\t\tconsole.log('[DEBUG] 未检测到评估结果关键词');\n\t}\n\t\n\treturn null;\n}\n\n/**\n * 生成UUID作为会话ID\n * @returns {String} - 返回UUID字符串\n */\nexport function generateUUID() {\n\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n\t\tconst r = Math.random() * 16 | 0;\n\t\tconst v = c === 'x' ? r : (r & 0x3 | 0x8);\n\t\treturn v.toString(16);\n\t});\n}\n\n/**\n * 检查网络状态\n * @returns {Promise} - 返回包含网络状态信息的Promise对象\n */\nexport function checkNetworkStatus() {\n\treturn new Promise((resolve) => {\n\t\tuni.getNetworkType({\n\t\t\tsuccess: function(res) {\n\t\t\t\tconst isConnected = res.networkType !== 'none';\n\t\t\t\tconsole.log('[DEBUG] 网络状态检查:', res.networkType, isConnected ? '可用' : '不可用');\n\t\t\t\tresolve({\n\t\t\t\t\tisConnected: isConnected,\n\t\t\t\t\tnetworkType: res.networkType\n\t\t\t\t});\n\t\t\t},\n\t\t\tfail: function() {\n\t\t\t\tconsole.error('[DEBUG] 网络状态检查失败');\n\t\t\t\t// 如果检查失败，假设网络可用，避免阻止用户操作\n\t\t\t\tresolve({\n\t\t\t\t\tisConnected: true,\n\t\t\t\t\tnetworkType: 'unknown'\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t});\n}"],"names":["uni"],"mappings":"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"}